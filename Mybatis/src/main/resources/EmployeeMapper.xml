<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
   namespace:  名称空间，类似包名。
        必须和对应的接口的全类名一致
-->
<mapper namespace="com.atguigu.mybatis.mapper.EmployeeMapper">
    <!--
        定义sql，是什么语句，就用什么标签。
            select语句，使用 <select>标签

            语句标签上的id，是这条语句在这个文件中的唯一标识，必须保证唯一。
                要和对应的方法名一致！

            如果是查询语句，必须在标签头上声明返回值类型
                resultType: 查询的结果集中的一行要封装为的Bean的类型
    -->
   <!--
     字面量（字面上就能看出变量值的变量）: 基本数据类型及包装类，String
        int a = 1;
        double b = 2.0d;
        String s = "haha";

        非字面量:  Employee e = new Employee();

      关于占位符:
            在jdbc中，使用?作为占位符
            在mybatis中，使用 #{xxx}作为占位符
                xxx：
                    如果传参的方法中，传入的参数中只有一个且是普通参数(字面量)，xxx可以随便写.
                    如果传参的方法中，传入的参数中只有一个且是Bean，xxx可以写Bean的属性名，#{xxx}就能获取Bean的属性值。

   -->
    <select id="getEmpById" resultType="com.atguigu.mybatis.beans.Employee">
        <include refid="sql1"/> where id = #{ageakljga}
    </select>

    <!--
        refid: 要引用的sql标签的id
    -->
    <select id="getAll" resultType="com.atguigu.mybatis.beans.Employee">
       <include refid="sql1"/>
    </select>



    <sql id="sql1">
        select * from employee
    </sql>

    <!--
         void updateEmp(new Employee(1, "jack", "a", "b"));

         #{id} = 1
         #{lastName} = jack
    -->
    <update id="updateEmp">
        update employee set last_name = #{lastName} , gender = #{gender} ,email = #{email}
        where id = #{id}
    </update>

    <insert id="insertEmp">
        insert into employee(last_name,gender,email) values(#{lastName},#{gender},#{email})
    </insert>

    <delete id="deleteEmpById">
        delete from employee where id = #{xxxx}
    </delete>


    <select id="getAllEmp" resultMap="rm1">
        <include refid="sql1"/>
    </select>

    <!-- 自定义封装规则
        type: 最终方法要封装的Bean的类型。 方法返回值的类型。
        autoMapping="true"： 没有指定封装规则的属性，还是用默认的规则封装。
    -->
    <resultMap id="rm1" type="com.atguigu.mybatis.beans.Emp" autoMapping="true">
        <!-- 一个result代表一个属性和一个列名的对应关系
            column: 列名
            property: bean的属性名
        -->
        <result column="last_name" property="name"/>
        <!-- 如果Bean的属性又是一个Bean，此时使用association指定
                 property: bean的属性名
                 javaType： 嵌套的Bean的类型
        -->
        <association property="genderAndEmail" javaType="com.atguigu.mybatis.beans.GenderAndEmail" autoMapping="true">
            <result column="email" property="emailAddr"/>
        </association>

    </resultMap>

    <!-- 动态sql
            动态拼接where部分

          <where>: 帮你生成一个where。如果标签体中没有内容，不生成。有内容，才生成一个where

          <if test=" 逻辑判断表达式 ">，如果test中为true，帮你拼接if标签体中的内容
    -->
    <select id="getEmps2" resultType="com.atguigu.mybatis.beans.Employee">
        select * from employee
        <where>
            <if test=" name != null and name != '' ">
                and last_name = #{name}
            </if>
            <if test=" g != null and g != '' ">
                and gender = #{g}
            </if>
            <if test=" e != null and e != '' ">
                and  email = #{e}
            </if>
        </where>
    </select>

</mapper>